Heranca

- Tipo de associacao que permite que uma classe herde dados e comportamemtos de outra
- Vantagens: Reuso, Polimorfismo
- Sintaxe: : (estende), base (referencia para a superclasse)
- Definicoe importantes:
	* Relacao "eh-um"
	* Generalizacao / especializacao
	* Superclasse (classe base) / subclasse(classe derivada)
	* Heranca / extensao
	* Heranca eh uma associacao entre classes (e nao entre objetos)

Implementacao:
- Classe:
	... class Civic : Car {}
	
	-> a classe Civic esta herdando todas as propriedades e metodos da classe Car.

- Construtores de classe:
	public Civic(prop_1, prop_2, prop_3, prop1) : base(prop_1, prop_2, prop_3)
{
	Prop1 = prop1;
} 

	-> as propriedades prop_1, prop_2, prop_3 pertencem a classe Car e prop1 a classe Civic. Para realizar a atribuicao correta usando heranca precisamos colocar ": base()" depois do final dos argumento da classe derivada e especificar dentro dos parenteses quais propriedades, qual metodo construtor vai ser usado e assim as propriedades da classe Pai ja seram atribuidas automaticamente, sem precisar de implementacao no construtor da classe derivada.

/////////// Casting ///////////

Upcasting:
- casting da subclasse pra superclasse
- totalmente aceita pelo compilador
- uso comum: polimorfismo

DownCasting:
- casting da superclasse pra subclasse
- nao eh aceita pelo compilador, precisamos usar (Nome_Subclasse)
- palavra as , is
- uso comum: metodos que recebem parametros genericos (ex: Equals(Object obj))

-> Palavra chave 'is':
	- Ela eh usada para verificar se aquele objeto eh de um tipo/classe especificado. True or False.

-> Palavra chave 'as':
	- Ela eh usada como uma sintaxe alternativa para typecasting. 
	- variavel_ = outravariavel_ as tipo_ 
	ao inves de usar: variavel_ = (tipo_)outravariavel_

////////// Sobreposicao de metodos ///////////

Podemos alterar a funcionalidade de um metodo de uma superclasse para uma subclasse especifica utilizando 'virtual' e 'override'

- virtual: permite que ela seja alterada em classes derivadas. Quando alterada/reemplementada, so mudara a funcionalidade apenas na classe que aquele metodo for alterado.

- override: uma sobreescrita do metodo, vamos utilizar override para indicar que aquele metodo da superclasse sera alterado/reemplementado na subclasse. Entao quando chamado o metodo no programa pela subclasse, o real metodo que sera executado sera o override e nao o virtual (original da superclasse).

- Palavra chave 'base': quando queremos manter a funcionalidade de um metodo da superclasse em uma subclasse e tambem adicionar alguma funcionalidade a mais. "base.Nome_Metodo()" serve para chamar o metodo da superclasse, dai a partir disso podemos adicionar mais coisas no metodo depois/antes do metodo virtual acontecer.

/////////// sealed //////////////

- Utilizado em Classes: evita que a classe seja herdada
	Namespace Course {
		sealed class SavingsAccount { (...)

- Utilizado em Metodos: evita que metodos sobreescritos sejam sobreescritos novamentente em outras classes derivadas a esta.
	-> so funciona com metodos que ja foram sobreescritos de uma superclasse.
		